"use client"

import type React from "react"
import { useEffect, useState } from "react"
import { Card, CardContent, CardTitle, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import {
  Info,
  AlertTriangle,
  BarChart3,
  FileText,
  Lightbulb,
  Settings,
  LinkIcon,
  TrendingUp,
  ListChecks,
  Zap,
  Truck,
  Play,
  Database,
  ShieldCheck,
  Brain,
  Sparkles,
  ArrowRight,
  Factory,
  CalendarDays,
  Layers,
  BookOpen,
} from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface DetailedSource {
  name: string
  contribution: string
  link?: string // Optional link for future use
}
// Define the structure of an insight received from the API
interface ApiInsight {
  iconName: string
  title: string
  description: string
  badgeText: string
  badgeVariant?: "default" | "secondary" | "destructive" | "outline"
  badgeClassName?: string
  source: string
  confidence: number | string
  isAI?: boolean
  actionLink?: {
    href: string
    text: string
    iconName: string
  }
  timestamp?: string
  sourcesCheckedCount?: number
  detailedSources?: DetailedSource[]
}

interface ContextualInsightsPanelProps {
  activeTab: string
}

// Icon mapping: API string names to Lucide components
const iconMap: Record<string, React.ElementType> = {
  Info,
  AlertTriangle,
  BarChart3,
  FileText,
  Lightbulb,
  Settings,
  LinkIcon,
  TrendingUp,
  ListChecks,
  Zap,
  Truck,
  Play,
  Database,
  ShieldCheck,
  Brain,
  Sparkles,
  ArrowRight,
  Factory,
  CalendarDays,
  Layers,
  BookOpen,
}

// Utility function to format "time ago" from timestamp
const formatTimeAgo = (timestamp: string): string => {
  const date = new Date(timestamp)
  const now = new Date()
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)

  if (diffInSeconds < 60) return "just now"
  const diffInMinutes = Math.floor(diffInSeconds / 60)
  if (diffInMinutes < 60) return `${diffInMinutes} minute${diffInMinutes > 1 ? "s" : ""} ago`
  const diffInHours = Math.floor(diffInMinutes / 60)
  if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? "s" : ""} ago`
  const diffInDays = Math.floor(diffInHours / 24)
  if (diffInDays < 30) return `${diffInDays} day${diffInDays > 1 ? "s" : ""} ago`
  const diffInMonths = Math.floor(diffInDays / 30)
  if (diffInMonths < 12) return `${diffInMonths} month${diffInMonths > 1 ? "s" : ""} ago`
  const diffInYears = Math.floor(diffInMonths / 12)
  return `${diffInYears} year${diffInYears > 1 ? "s" : ""} ago`
}

const InsightCard: React.FC<
  Omit<ApiInsight, "iconName" | "actionLink"> & {
    icon: React.ElementType
    actionLink?: ApiInsight["actionLink"] & { icon: React.ElementType }
    onSourcesClick: () => void
  }
> = ({
  icon: Icon,
  title,
  description,
  badgeText,
  badgeVariant = "secondary",
  badgeClassName,
  source,
  confidence,
  isAI = false,
  actionLink,
  timestamp,
  sourcesCheckedCount,
  detailedSources,
  onSourcesClick,
}) => (
  <Card className="mb-4 transition-all duration-300 hover:shadow-lg border border-slate-200 bg-white">
    <div className="flex flex-col space-y-1.5 p-6 pb-3">
      <div className="flex items-start justify-between">
        <div className="flex items-center">
          <Icon className="w-6 h-6 mr-3 text-brand-accent flex-shrink-0" />
          <CardTitle className="text-base font-semibold text-brand-dark leading-tight flex items-center gap-2">
            <span>{title}</span>
            {isAI && (
              <TooltipProvider delayDuration={0}>
                <Tooltip>
                  <TooltipTrigger>
                    <Sparkles className="w-4 h-4 text-amber-500" />
                  </TooltipTrigger>
                  <TooltipContent className="bg-slate-900 text-white border-slate-700">
                    <p>Generated by AI</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
          </CardTitle>
        </div>
        <Badge variant={badgeVariant} className={`ml-2 flex-shrink-0 ${badgeClassName}`}>
          {badgeText}
        </Badge>
      </div>
    </div>
    <CardContent className="pb-4">
      <p className="text-sm text-slate-600 mb-3">{description}</p>
      <div className="text-xs text-slate-500 space-y-1.5 pt-3 border-t border-slate-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            {isAI ? (
              <Brain className="w-3.5 h-3.5 mr-1.5 text-sky-500" />
            ) : (
              <Database className="w-3.5 h-3.5 mr-1.5 text-slate-400" />
            )}
            <span>Source: {source}</span>
            {isAI && <Sparkles className="w-3.5 h-3.5 ml-1 text-amber-500" />}
          </div>
          {timestamp && (
            <div className="flex items-center">
              <CalendarDays className="w-3.5 h-3.5 mr-1.5 text-slate-400" />
              <span>{formatTimeAgo(timestamp)}</span>
            </div>
          )}
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <ShieldCheck className="w-3.5 h-3.5 mr-1.5 text-green-500" />
            <span>Confidence: {typeof confidence === "number" ? `${confidence}%` : confidence}</span>
          </div>
          {isAI && sourcesCheckedCount && sourcesCheckedCount > 0 && (
            <Button
              variant="link"
              size="sm"
              className="text-xs p-0 h-auto text-slate-500 hover:text-brand-accent"
              onClick={onSourcesClick}
            >
              <Layers className="w-3.5 h-3.5 mr-1.5" />
              <span>
                {sourcesCheckedCount} source{sourcesCheckedCount > 1 ? "s" : ""} checked
              </span>
            </Button>
          )}
        </div>
      </div>
    </CardContent>
    {actionLink && (
      <CardFooter className="pt-0 pb-3">
        <Button variant="link" size="sm" className="text-brand-accent p-0 h-auto" asChild>
          <a href={actionLink.href}>
            <actionLink.icon className="w-3.5 h-3.5 mr-1.5" />
            {actionLink.text}
          </a>
        </Button>
      </CardFooter>
    )}
  </Card>
)

const InsightCardSkeleton: React.FC = () => (
  <Card className="mb-4 border border-slate-200 bg-white">
    {/* ... skeleton content remains largely the same ... */}
    <div className="flex flex-col space-y-1.5 p-6 pb-3">
      <div className="flex items-start justify-between">
        <div className="flex items-center">
          <Skeleton className="w-6 h-6 mr-3 rounded-full" />
          <Skeleton className="h-5 w-3/4" />
        </div>
        <Skeleton className="h-5 w-16 ml-2" />
      </div>
    </div>
    <CardContent className="pb-4">
      <Skeleton className="h-4 w-full mb-1" />
      <Skeleton className="h-4 w-5/6 mb-3" />
      <div className="space-y-1.5 pt-3 border-t border-slate-100">
        <div className="flex items-center justify-between">
          <Skeleton className="h-3 w-[45%]" />
          <Skeleton className="h-3 w-[20%]" />
        </div>
        <div className="flex items-center justify-between">
          <Skeleton className="h-3 w-[30%]" />
          <Skeleton className="h-3 w-[35%]" />
        </div>
      </div>
    </CardContent>
  </Card>
)

export default function ContextualInsightsPanel({ activeTab }: ContextualInsightsPanelProps) {
  const [insights, setInsights] = useState<ApiInsight[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedInsightSources, setSelectedInsightSources] = useState<DetailedSource[] | undefined>(undefined)
  const [isSourcesDialogOpen, setIsSourcesDialogOpen] = useState(false)

  useEffect(() => {
    const fetchInsights = async () => {
      setIsLoading(true)
      setError(null)
      setInsights([])
      try {
        const response = await fetch(`/api/contextual-insights?tab=${activeTab}`)
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}))
          throw new Error(
            `Failed to fetch insights: ${response.status} ${response.statusText}. ${errorData.error || ""}`,
          )
        }
        const data = await response.json()
        setInsights(data.insights || [])
      } catch (err) {
        setError(err instanceof Error ? err.message : "An unknown error occurred while fetching insights.")
        setInsights([])
      } finally {
        setIsLoading(false)
      }
    }

    if (activeTab) {
      fetchInsights()
    }
  }, [activeTab])

  const handleSourcesClick = (detailedSources?: DetailedSource[]) => {
    if (detailedSources && detailedSources.length > 0) {
      setSelectedInsightSources(detailedSources)
      setIsSourcesDialogOpen(true)
    }
  }

  let content: React.ReactNode

  if (isLoading) {
    content = (
      <>
        <InsightCardSkeleton />
        <InsightCardSkeleton />
        <InsightCardSkeleton />
      </>
    )
  } else if (error) {
    // ... error handling ...
    content = (
      <div className="text-center text-red-500 py-10 flex flex-col items-center h-full justify-center">
        <AlertTriangle className="w-12 h-12 mx-auto mb-4 text-red-400" />
        <h4 className="font-semibold text-red-600">Error Loading Insights</h4>
        <p className="text-sm">{error}</p>
        <Button
          variant="outline"
          size="sm"
          onClick={() => {
            const fetchAgain = async () => {
              setIsLoading(true)
              setError(null)
              setInsights([])
              try {
                const response = await fetch(`/api/contextual-insights?tab=${activeTab}`)
                if (!response.ok) throw new Error(`Failed to fetch insights: ${response.statusText}`)
                const data = await response.json()
                setInsights(data.insights || [])
              } catch (err) {
                setError(err instanceof Error ? err.message : "An unknown error occurred")
                setInsights([])
              } finally {
                setIsLoading(false)
              }
            }
            fetchAgain()
          }}
          className="mt-4"
        >
          Try Again
        </Button>
      </div>
    )
  } else if (insights.length > 0) {
    content = insights.map((insight, index) => {
      const IconComponent = iconMap[insight.iconName] || Info
      const ActionIconComponent = insight.actionLink ? iconMap[insight.actionLink.iconName] || LinkIcon : undefined

      return (
        <InsightCard
          key={`${insight.title}-${index}`}
          {...insight} // Pass all insight props
          icon={IconComponent}
          actionLink={
            insight.actionLink && ActionIconComponent ? { ...insight.actionLink, icon: ActionIconComponent } : undefined
          }
          onSourcesClick={() => handleSourcesClick(insight.detailedSources)}
        />
      )
    })
  } else {
    // ... no insights message ...
    content = (
      <div className="text-center text-slate-500 py-16 flex flex-col items-center h-full justify-center">
        <Info className="w-12 h-12 mx-auto mb-4 text-slate-300" />
        <h4 className="font-semibold text-slate-600">No Specific Insights</h4>
        <p className="text-sm">No contextual information available for this view at the moment.</p>
      </div>
    )
  }

  return (
    <>
      <div className="h-full flex flex-col bg-slate-50">
        <div className="p-4 border-b border-slate-200 bg-white">
          <h3 className="text-lg font-semibold text-brand-dark flex items-center">
            <Lightbulb className="w-5 h-5 mr-2.5 text-brand-accent" />
            Contextual Insights
          </h3>
          <p className="text-xs text-slate-500 ml-[30px]">Relevant information based on your current view.</p>
        </div>
        <ScrollArea className="flex-grow p-4">{content}</ScrollArea>
        <div className="p-4 border-t border-slate-200 mt-auto bg-white">
          <Button variant="outline" className="w-full text-slate-700 hover:bg-slate-100">
            <Settings className="w-4 h-4 mr-2" />
            Customize Insights Feed
          </Button>
        </div>
      </div>

      <Dialog open={isSourcesDialogOpen} onOpenChange={setIsSourcesDialogOpen}>
        <DialogContent className="sm:max-w-[525px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <BookOpen className="w-5 h-5 mr-2 text-brand-accent" />
              Detailed Sources
            </DialogTitle>
            <DialogDescription>
              The AI insight was synthesized based on information from the following categories of sources:
            </DialogDescription>
          </DialogHeader>
          <ScrollArea className="max-h-[60vh] pr-2">
            <div className="grid gap-4 py-4">
              {selectedInsightSources?.map((src, idx) => (
                <div key={idx} className="p-3 border rounded-md bg-slate-50">
                  <h4 className="font-semibold text-sm text-brand-dark mb-1">{src.name}</h4>
                  <p className="text-xs text-slate-600">{src.contribution}</p>
                  {/* We can add src.link here in the future if available */}
                </div>
              ))}
            </div>
          </ScrollArea>
          <DialogFooter>
            <DialogClose asChild>
              <Button type="button" variant="secondary">
                Close
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}
